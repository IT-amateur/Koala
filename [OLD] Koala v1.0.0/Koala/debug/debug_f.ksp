{

********* KOALA - AN ADVANCED SCRIPTING LIBRARY FOR KSP DEVELOPERS *********

This file is part of Koala - An advanced scripting library for KSP developers.

Copyright (c) 2016 Davide Magni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
in the documentation and/or other materials provided with the distribution.

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

CONTACTS

koala@davidemagni.com
www.davidemagni.com
Skype: magneto538
Twitter: magneto538

}   

function DEBUG.on_ui_control(name)
	USE_CODE_IF(ENABLE_DEBUG)
		DEBUG.SELECTED_UI_ID := get_ui_id(name)

		DEBUG.var_name := search(_UI_IDS, DEBUG.SELECTED_UI_ID)
		DEBUG.ui_type := _UI_TYPE[search(_UI_IDS, DEBUG.SELECTED_UI_ID)]
		DEBUG.ui_family_name := _UI_FAMILIES[search(_UI_IDS, DEBUG.SELECTED_UI_ID)]

		DEBUG.var_menu_text_update
	END_USE_CODE
end function

function DEBUG.on_note
	USE_CODE_IF(ENABLE_DEBUG)	
		if (DEBUG.midi_mon_freeze_engine = ON)
			ignore_event(ALL_EVENTS)
			exit
		end if
		if (DEBUG.midi_mon_note_on = ON)
			DEBUG.midi_monitor("Note ON", !NOTE_NAME[EVENT_NOTE], EVENT_NOTE, EVENT_VELOCITY, !DEBUG.source_txt[get_event_par(EVENT_ID, EVENT_PAR_SOURCE)+1])
		end if
	END_USE_CODE
end function

function DEBUG.on_release
	USE_CODE_IF(ENABLE_DEBUG)	
		if (DEBUG.midi_mon_freeze_engine = ON)
			ignore_event(ALL_EVENTS)			
			exit
		end if	
		if (DEBUG.midi_mon_note_off = ON)
			DEBUG.midi_monitor("Note OFF", !NOTE_NAME[EVENT_NOTE], EVENT_NOTE, EVENT_VELOCITY, !DEBUG.source_txt[get_event_par(EVENT_ID, EVENT_PAR_SOURCE)+1])
		end if
	END_USE_CODE
end function

function DEBUG.on_controller
	USE_CODE_IF(ENABLE_DEBUG)
		if (DEBUG.midi_mon_freeze_engine = ON)
			exit {Quits the function, not the entire callback, so there shouldn't be issues if used here... The on controller will still be executed}
		end if	
		if (DEBUG.midi_mon_cc = ON)
			select CC_NUM
				case 0 to 119 {Midi CC}
					DEBUG.midi_monitor("Controller", !CC_NAME[CC_NUM], CC_NUM, CC[CC_NUM], "-")					
				case 120 to 127 {Mode Msgs}
					DEBUG.midi_monitor("Mode Msg", !CC_NAME[CC_NUM], CC_NUM, CC[CC_NUM], "-")									
				case VCC_MONO_AT 
					DEBUG.midi_monitor("Controller", "Mono AT", CC_NUM, CC[CC_NUM], "-")
			end select				
		end if
		if (DEBUG.midi_mon_pb = ON)
			if (CC_NUM = VCC_PITCH_BEND)		
				DEBUG.midi_monitor("Controller", "Pitch Bend", CC_NUM, CC[CC_NUM], "-")	
			end if 
		end if
		{Sync testing value edit with modified CC data}
		if (DEBUG.midi_cc_test = CC_NUM)
			set_value(get_ui_id(DEBUG.midi_cc_test_value), CC[DEBUG.midi_cc_test])					
		end if
	END_USE_CODE
end function

{PRIVATE}

function DEBUG.panic
	for _j := 0 to 127
		note_off(_j)
	end for
	set_controller(123, 0) {All Notes Off}
	fade_out(ALL_EVENTS, 1, 1)
end function

function DEBUG.add_ctrl(name, fam_id)
	USE_CODE_IF(ENABLE_DEBUG)
		inc(DEBUG.UI_COUNT)
		DEBUG.UI_IDS[DEBUG.UI_COUNT] := get_ui_id(name)
		DEBUG.UI_FAMILIES[DEBUG.UI_COUNT] := fam_id
	END_USE_CODE
end function

function DEBUG.pos_y(row) -> return
	USE_CODE_IF(ENABLE_DEBUG)
		return := DEBUG.row1+(18*row)
	END_USE_CODE
end function

function DEBUG.pos_x(col) -> return
	USE_CODE_IF(ENABLE_DEBUG)
		return := (DEBUG.col_width+5)*col
	END_USE_CODE
end function

function DEBUG.set_type(type)
	USE_CODE_IF(ENABLE_DEBUG)
		!DEBUG.UI_TYPES[_UI_COUNT] := type
	END_USE_CODE
end function

function DEBUG.set_persistence(pers_status)
	USE_CODE_IF(ENABLE_DEBUG)
		select pers_status
			case PERSISTENT 
				!DEBUG.UI_PERSISTENCE[_UI_COUNT] := "Y"		
			case NOT_PERSISTENT
				!DEBUG.UI_PERSISTENCE[_UI_COUNT] := "N"
		end select	
	END_USE_CODE
end function

function DEBUG.view
	USE_CODE_IF(ENABLE_DEBUG)
		DEBUG.page_ui := 0	
		DEBUG.page_event := 0	
		DEBUG.page_custom := 0		
		set_control_par(get_ui_id(DEBUG.bg_label), CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
		DEBUG.hide_family(DEBUG.UI_FAMILY)
		DEBUG.hide_family(DEBUG.EVENT_FAMILY)			
		DEBUG.hide_family(DEBUG.CUSTOM_FAMILY)
		restore_visibility_settings(ALL_FAMILIES)	
		select DEBUG.selected_page
			case DEBUG.page_ui_id
				DEBUG.page_ui := 1
				set_control_par(get_ui_id(DEBUG.bg_label), CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
				DEBUG.show_family(DEBUG.UI_FAMILY)
			case DEBUG.page_event_id
				DEBUG.page_event := 1
				set_control_par(get_ui_id(DEBUG.bg_label), CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
				DEBUG.show_family(DEBUG.EVENT_FAMILY)
				DEBUG.temp_set_fam_visibility(ALL_FAMILIES, INVISIBLE)
			case DEBUG.page_custom_id
				DEBUG.page_custom := 1
				set_control_par(get_ui_id(DEBUG.bg_label), CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
				DEBUG.show_family(DEBUG.CUSTOM_FAMILY)	
		end select
	END_USE_CODE
end function

function DEBUG.hide_family(fam)
	USE_CODE_IF(ENABLE_DEBUG)
		_j := 1
		while (DEBUG.UI_IDS[_j] # _EOA)
			if (DEBUG.UI_FAMILIES[_j] = fam)			
				set_control_par(DEBUG.UI_IDS[_j], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
			end if
			inc(_j)
		end while
	END_USE_CODE
end function

function DEBUG.temp_set_fam_visibility(fam, value)
	if (fam = ALL_FAMILIES)
		_j := 1
		while (_UI_IDS[_j] # _EOA)	
			set_control_par(_UI_IDS[_j], CONTROL_PAR_HIDE, value)
			inc(_j)
		end while
	else
		_j := 1		
		while (_UI_IDS[_j] # _EOA)
			if (_UI_FAMILIES[_j] = fam)		
				set_control_par(_UI_IDS[_j], CONTROL_PAR_HIDE, value)
			end if
			inc(_j)
		end while
	end if
end function

function DEBUG.show_family(fam)
	USE_CODE_IF(ENABLE_DEBUG)
		_j := 1		
		while (DEBUG.UI_IDS[_j] # _EOA)
			if (DEBUG.UI_FAMILIES[_j] = fam)			
				set_control_par(DEBUG.UI_IDS[_j], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
			end if
			inc(_j)
		end while
	END_USE_CODE
end function

function DEBUG.midi_monitor(msg, note, byte1, byte2, src)
	USE_CODE_IF(ENABLE_DEBUG)

		if (DEBUG.event_count < _MAX_KSP_VALUE)
			inc(DEBUG.event_count)
		else 
			DEBUG.event_count := 0
		end if

		if (DEBUG.midi_mon_freeze = OFF)
			inc(DEBUG.midi_mon_count)
			if (DEBUG.midi_mon_count = 28)
				DEBUG.midi_mon_count := 0
				DEBUG.midi_monitor_reset_view
			end if
			add_text_line(DEBUG.midi_event_counter, DEBUG.event_count)
			add_text_line(DEBUG.midi_msg, msg)
			add_text_line(DEBUG.midi_event, note)
			add_text_line(DEBUG.midi_byte1, byte1)
			add_text_line(DEBUG.midi_byte2, byte2)
			add_text_line(DEBUG.midi_src, src)
		end if
	END_USE_CODE
end function

function DEBUG.midi_monitor_reset_view
	USE_CODE_IF(ENABLE_DEBUG)
		set_control_par_str(get_ui_id(DEBUG.midi_event_counter), CONTROL_PAR_TEXT, "")
		set_control_par_str(get_ui_id(DEBUG.midi_msg), CONTROL_PAR_TEXT, "")
		set_control_par_str(get_ui_id(DEBUG.midi_event), CONTROL_PAR_TEXT, "")
		set_control_par_str(get_ui_id(DEBUG.midi_byte1), CONTROL_PAR_TEXT, "")
		set_control_par_str(get_ui_id(DEBUG.midi_byte2), CONTROL_PAR_TEXT, "")
		set_control_par_str(get_ui_id(DEBUG.midi_src), CONTROL_PAR_TEXT, "")
	END_USE_CODE
end function

function DEBUG.fam_menu_filter
	USE_CODE_IF(ENABLE_DEBUG)
		declare DEBUG.menu_visibility

		_j := 1
		while (_UI_IDS[_j] # _EOA)
			DEBUG.menu_visibility := 1

			if (_UI_FAMILIES[_j] # DEBUG.ui_family_name or _UI_TYPE[_j] # DEBUG.ui_type)
				DEBUG.menu_visibility := 0
			end if

			if (DEBUG.ui_family_name = ALL_FAMILIES and _UI_TYPE[_j] = DEBUG.ui_type)
				DEBUG.menu_visibility := 1
			end if

			if (DEBUG.ui_type = ALL_TYPES and _UI_FAMILIES[_j] = DEBUG.ui_family_name)
				DEBUG.menu_visibility := 1
			end if

			if (DEBUG.ui_type = ALL_TYPES and DEBUG.ui_family_name = ALL_FAMILIES)
				DEBUG.menu_visibility := 1
			end if

			set_menu_item_visibility(get_ui_id(DEBUG.var_name), _j, DEBUG.menu_visibility)
			inc(_j)
		end while

		DEBUG.var_name := 0
		set_menu_item_visibility(get_ui_id(DEBUG.var_name), 0, 1)	

		DEBUG.var_menu_text_update
	END_USE_CODE
end function

function DEBUG.var_menu_text_update
	USE_CODE_IF(ENABLE_DEBUG)
		if (DEBUG.var_name # 0)

			set_ctrl_text(get_ui_id(DEBUG.ui_id), "UI ID: " & _UI_IDS[DEBUG.var_name])
			set_ctrl_text(get_ui_id(DEBUG.value), "Value: " & get_value(_UI_IDS[DEBUG.var_name]))

			set_ctrl_text(get_ui_id(DEBUG.ui_pos_x), "Pos. X: " & get_pos_x(_UI_IDS[DEBUG.var_name]))
			set_ctrl_text(get_ui_id(DEBUG.ui_pos_y), "Pos. Y: " & get_pos_y(_UI_IDS[DEBUG.var_name]))
			set_ctrl_text(get_ui_id(DEBUG.ui_width), "Width: " & get_width(_UI_IDS[DEBUG.var_name]))
			set_ctrl_text(get_ui_id(DEBUG.ui_height), "Height: " & get_height(_UI_IDS[DEBUG.var_name]))

			set_value(get_ui_id(DEBUG.adjust_pos_x), get_pos_x(_UI_IDS[DEBUG.var_name]))
			set_value(get_ui_id(DEBUG.adjust_pos_y), get_pos_y(_UI_IDS[DEBUG.var_name]))

			set_value(get_ui_id(DEBUG.adjust_width), get_width(_UI_IDS[DEBUG.var_name]))
			set_value(get_ui_id(DEBUG.adjust_height), get_height(_UI_IDS[DEBUG.var_name]))

			set_ctrl_text(get_ui_id(DEBUG.ui_persistence_status), "Persistent: " & !DEBUG.UI_PERSISTENCE[DEBUG.var_name])
			set_ctrl_text(get_ui_id(DEBUG.number), "Ctrl No.: " & DEBUG.var_name)
		else

			set_ctrl_text(get_ui_id(DEBUG.ui_id), "UI ID: -")
			set_ctrl_text(get_ui_id(DEBUG.value), "Value: -")

			set_ctrl_text(get_ui_id(DEBUG.ui_pos_x), "Pos. X: -")
			set_ctrl_text(get_ui_id(DEBUG.ui_pos_y), "Pos. Y: -")
			set_ctrl_text(get_ui_id(DEBUG.ui_width), "Width: -")
			set_ctrl_text(get_ui_id(DEBUG.ui_height), "Height: -")

			set_value(get_ui_id(DEBUG.adjust_pos_x), 0)
			set_value(get_ui_id(DEBUG.adjust_pos_y), 0)

			set_ctrl_text(get_ui_id(DEBUG.ui_persistence_status), "Persistent: -")
			set_ctrl_text(get_ui_id(DEBUG.number), "Ctrl No.: -")		
		end if
	END_USE_CODE	
end function


