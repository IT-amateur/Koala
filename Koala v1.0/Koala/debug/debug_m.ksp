{

********* KOALA - AN ADVANCED SCRIPTING LIBRARY FOR KSP DEVELOPERS *********

This file is part of Koala - An advanced scripting library for KSP developers.

Koala is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Koala is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Koala. If not, see <http://www.gnu.org/licenses/>.

Koala and all its content - included individual scripting files, the Manual and its content, 
all the functions and features - are protected by copyright and registered to Davide Magni.

Â© Davide Magni, 2016. All rights reserved.

---

CONTACTS

koala@davidemagni.com
www.davidemagni.com
Skype: magneto538
Twitter: magneto538

}   

macro DEBUG.custom_button(#n#, text, #line_1#, #line_2#, #line_3#)
	USE_CODE_IF(ENABLE_DEBUG)	
		on ui_control (DEBUG.custom_button_#n#)
			set_control_par_str(get_ui_id(DEBUG.custom_button_#n#), CONTROL_PAR_TEXT, text)
			#line_1#
			#line_2#
			#line_3#
			DEBUG.custom_button_#n# := 0
		end on
	END_USE_CODE
end macro

macro DEBUG.custom_value_edit(#n#, #min#, #max#, #line_1#, #line_2#, #line_3#)
	USE_CODE_IF(ENABLE_DEBUG)	
		on ui_control (DEBUG.custom_ve_#n#)
			if (DEBUG.custom_ve_#n# < #min#)
				DEBUG.custom_ve_#n# := #min#
			end if
			if (DEBUG.custom_ve_#n# > #max#)
				DEBUG.custom_ve_#n# := #max#
			end if
			#line_1#
			#line_2#
			#line_3#
		end on
	END_USE_CODE
end macro

macro DEBUG.show_value(lbl_idx, #var#)
	USE_CODE_IF(ENABLE_DEBUG)
		set_control_par(DEBUG.var_name_ids[lbl_idx - 1], CONTROL_PAR_FONT_TYPE, CONSOLE.YELLOW)
		set_control_par(DEBUG.var_name_ids[lbl_idx - 1], CONTROL_PAR_TEXT_ALIGNMENT, RIGHT)	
		set_control_par_str(DEBUG.var_name_ids[lbl_idx - 1], CONTROL_PAR_TEXT, "#var#")
		set_control_par_str(DEBUG.var_value_ids[lbl_idx - 1], CONTROL_PAR_TEXT, #var#)
	END_USE_CODE
end macro

{PRIVATE}

macro DEBUG.label(#name#, fam, x, y, text, font, alignment)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_label DEBUG.#name#(1, 1)
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, DEBUG.col_width)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_HEIGHT, 18)
		set_control_par_str(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT, text)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_FONT_TYPE, font)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT_ALIGNMENT, alignment)
	END_USE_CODE
end macro

macro DEBUG.midi_mon(#name#, fam, x, y, text, font, alignment)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_label DEBUG.#name#(3, 2)
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, DEBUG.col_width)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_HEIGHT, 400)
		set_control_par_str(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT, text)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_FONT_TYPE, font)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT_ALIGNMENT, alignment)
	END_USE_CODE
end macro

macro DEBUG.bg_label(#name#, fam, x, y, w, h, text)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_label DEBUG.#name#(1, 1)
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, w)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_HEIGHT, h)
		set_control_par_str(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT, text)
	END_USE_CODE
end macro

macro DEBUG.button(#name#, fam, x, y, default, text)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_button DEBUG.#name#
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, DEBUG.col_width)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_HEIGHT, 18)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_DEFAULT_VALUE, default)	
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_VALUE, default)	
		set_control_par_str(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT, text)
	END_USE_CODE
end macro

macro DEBUG.value_edit(#name#, fam, x, y, min, max, default, disp_ratio, font, text)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_value_edit DEBUG.#name# (min, max, disp_ratio)
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, DEBUG.col_width)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_DEFAULT_VALUE, default)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_VALUE, default)	
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_FONT_TYPE, font)	
		set_control_par_str(get_ui_id(DEBUG.#name#), CONTROL_PAR_TEXT, text)
	END_USE_CODE
end macro

macro DEBUG.slider(#name#, fam, x, y, min, max, default)
	USE_CODE_IF(ENABLE_DEBUG)	
		declare ui_slider DEBUG.#name# (min, max)
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_DEFAULT_VALUE, default)	
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_VALUE, default)	
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_MOUSE_BEHAVIOUR, 700)	
	END_USE_CODE
end macro

macro DEBUG.menu(#name#, fam, x, y, default)
	USE_CODE_IF(ENABLE_DEBUG)
		declare ui_menu DEBUG.#name#
		DEBUG.add_ctrl(DEBUG.#name#, fam)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_X, x)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_POS_Y, y)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_WIDTH, DEBUG.col_width)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_DEFAULT_VALUE, default)
		set_control_par(get_ui_id(DEBUG.#name#), CONTROL_PAR_VALUE, default)
	END_USE_CODE
end macro

macro DEBUG.page_button(#name#)
	USE_CODE_IF(ENABLE_DEBUG)	
		on ui_control (DEBUG.#name#)
			if (DEBUG.#name# = 1)
				DEBUG.selected_page := DEBUG.#name#_id
			else 
				DEBUG.selected_page := DEBUG.page_none
			end if
			call DEBUG.view
		end on
	END_USE_CODE
end macro

macro empty {needed as placeholder for unused arguments in functions}
end macro