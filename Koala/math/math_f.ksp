{

********* KOALA - AN ADVANCED SCRIPTING LIBRARY FOR KSP DEVELOPERS *********

This file is part of Koala - An advanced scripting library for KSP developers.

Copyright (c) 2016 Davide Magni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
in the documentation and/or other materials provided with the distribution.

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

CONTACTS

koala@davidemagni.com
www.davidemagni.com
Skype: magneto538
Twitter: magneto538

}  

// Curve
// curve_value shall be a value from -50 to 50. 0 is linear.
define CURVE_AMOUNT(curve_value) := ( int_to_real((1000 + curve_value) * 10) / 10000.0 )

function curve(curve_value, lin_value, curve_steps, min, max) -> return
	declare temp 
	if CURVE_AMOUNT(curve_value) # 1.0
		return := min + real_to_int( int_to_real(max-min) * (( pow(CURVE_AMOUNT(curve_value), int_to_real(lin_value)) - 1.0 ) / ( pow(CURVE_AMOUNT(curve_value), int_to_real(curve_steps)) - 1.0 ) ) )
	else 
		return := min + lin_value*(max-min)/curve_steps
	end if 
end function

// Credits to BigBob's Sign() function. return_mode chooses the format of the return:
// if return_mode is 0: negative value 0, positive value 1
// if return_mode is 1: negative value -1, positive value 1
function sign(value, return_mode) -> return
	return := ((sh_right(value, 31) .or. 1) + (1-return_mode)) / (2-return_mode)
end function

// Turn 0 into 1 and vice-versa. Applies XOR operator to input value.
function flip(value, bit_pos) -> return
	return := ( (value .and. .not. sh_left(1, bit_pos)) .or. (.not. value .and. sh_left(1, bit_pos)) )
end function

// Advanced logarythm function. The user may now set a custom integer base and a real/int value to be processed.
function log10(value) -> return
	return := log_b(10, value)
end function

function log2(value) -> return
	return := log_b(2, value)
end function

function log_b(base, value) -> return 
	return := log(value) / log(int_to_real(base))
end function

// Simplified syntax for common powers
function pow2(value) -> return
	return := pow(value, 2.0)
end function

function pow3(value) -> return
	return := pow(value, 3.0)
end function

// Root with custom index
function cbrt(value) -> return
	return := nth_root(3, value)
end function

function nth_root(idx, value) -> return
	return := pow(value, (1.0/int_to_real(idx)))
end function

// Compute hypotenuse given two cathetuses
function hypot(cath_1, cath_2) -> return
	return := sqrt( pow2(cath_1)+pow2(cath_2) )
end function

// Range, minimum and maximum value. Thanks to BigBob's Math library.
function range(a, b) -> return
	return := abs(a-b)
end function

function max(a, b) -> return
	return := a*(1 + sh_right(a - b, 31)) - b*sh_right(a - b, 31)
end function

function min(a, b) -> return
	return := a*(1 + sh_right(b - a, 31)) - b*sh_right(b - a, 31)
end function

function bit_rnd(unsigned) -> return 
	return := 0
	for i := 0 to 31 - unsigned
		return := return .or. sh_left(random(0,1), i)
	end for
end function

// fmod function is basically a workaround to use mod operator on real numbers. mod is not defined outside the
// integers.
function fmod(a, b) -> return
	return := ((a) - floor((a) / (b)) * (b))
end function

// returns a bit sequence from an integer. The output is a text string.
function int_to_bin(int, bit_nr) -> return
	if bit_nr <= 0x20
		return := ''
		for i := 0 to bit_nr-1 
			return := (sh_right(int, i) .and. 1) & return
		end for
	else 
		return := '### KOALA WARNING: int_to_bin has invalid bit_nr (must be <= 32)!'
		message(return)
	end if
end function

// returns a hex sequence from an integer. 
// The output is formatted in order to match Kontakt's requests ('9' before and 'h' after the string)
// This function is a fork of Hex() in BigBob's Math library.
function int_to_hex(int) -> return 
	declare input
	input := int
	return := ''
	for i := 0 to 7
		select input .and. 0xF
			case 0 to 9 
				return := input .and. 0xF & return
			case 10
				return := 'A' & return
			case 11
				return := 'B' & return
			case 12
				return := 'C' & return
			case 13
				return := 'D' & return
			case 14
				return := 'E' & return
			case 15
				return := 'F' & return
		end select
    	input := sh_right(input, 4) 
	end for
	return := '9' & return & 'h'
end function
