{

************* KSP EXTENDED COMMANDS LIBRARY *************

Add, initialize and manage GUI controls

v0.1 - Last update 2016-01-09

}

{UI initialization}
function create_instrument(height, wallpaper, icon, title)
	make_perfview	
	set_control_par_str(INST_WALLPAPER_ID, CONTROL_PAR_PICTURE, wallpaper)
	set_control_par_str(INST_ICON_ID, CONTROL_PAR_PICTURE, icon)

	USE_CODE_IF_NOT(ENABLE_DEBUG)
		set_ui_height_px(height)
	    set_script_title(title)
	    message("")
	END_USE_CODE

	USE_CODE_IF(ENABLE_DEBUG)
		set_ui_height_px(540)
	    set_script_title("### " & title)
	END_USE_CODE
end function

{UI Controls functions}
function resize_ctrl(ui_id, w, h)
	set_control_par(ui_id, CONTROL_PAR_WIDTH, w)
	set_control_par(ui_id, CONTROL_PAR_HEIGHT, h)
end function

function set_pos(ui_id, x, y)
	set_control_par(ui_id, CONTROL_PAR_POS_X, x)
	set_control_par(ui_id, CONTROL_PAR_POS_Y, y)
	_update_init_value(ui_id, _UI_POS_X, x)
	_update_init_value(ui_id, _UI_POS_Y, y)	
end function

function shift_ctrl(ui_id, off_x, off_y)
	set_control_par(ui_id, CONTROL_PAR_POS_X, get_pos_x(ui_id) + off_x)
	set_control_par(ui_id, CONTROL_PAR_POS_Y, get_pos_y(ui_id) + off_y)
	_update_init_value(ui_id, _UI_POS_X, get_pos_x(ui_id))
	_update_init_value(ui_id, _UI_POS_Y, get_pos_x(ui_id))	
end function

function set_ctrl_pic(ui_id, picture)
	set_control_par_str(ui_id, CONTROL_PAR_PICTURE, picture)
	_update_init_value(ui_id, !_UI_PICTURE, picture)	
end function

function set_ctrl_text(ui_id, text)
	set_control_par_str(ui_id, CONTROL_PAR_TEXT, text)
	_update_init_value(ui_id, !_UI_TEXT, text)	
end function

function set_font(ui_id, font, alignment)
	set_control_par(ui_id, CONTROL_PAR_FONT_TYPE, font)	
	set_control_par(ui_id, CONTROL_PAR_TEXT_ALIGNMENT, alignment)
	_update_init_value(ui_id, _UI_FONT_TYPE, font)
	_update_init_value(ui_id, _UI_FONT_ALIGNMENT, alignment)	
end function

function set_value(ui_id, value)
	set_control_par(ui_id, CONTROL_PAR_VALUE, value)
	_update_init_value(ui_id, _UI_DEFAULT_VALUE, value)
end function

function set_visibility(ui_id, value)
	set_control_par(ui_id, CONTROL_PAR_HIDE, value)
	_UI_CURR_VISIBILITY[search_ctrl_number(ui_id)] := value
	_update_init_value(ui_id, _UI_DEF_VISIBILITY, value)
end function 

{Reset UI Controls functions}
function reset_pos(ui_id)
	set_control_par(ui_id, CONTROL_PAR_POS_X, _UI_POS_X[search_ctrl_number(ui_id)])
	set_control_par(ui_id, CONTROL_PAR_POS_Y, _UI_POS_Y[search_ctrl_number(ui_id)])
end function

function reset_ctrl_pic(ui_id)
	set_control_par_str(ui_id, CONTROL_PAR_PICTURE, !_UI_PICTURE[search_ctrl_number(ui_id)])
end function

function reset_ctrl_text(ui_id)
	set_control_par_str(ui_id, CONTROL_PAR_TEXT, !_UI_TEXT[search_ctrl_number(ui_id)])
end function

function reset_font(ui_id)
	set_control_par(ui_id, CONTROL_PAR_FONT_TYPE, _UI_FONT_TYPE[search_ctrl_number(ui_id)])	
	set_control_par(ui_id, CONTROL_PAR_TEXT_ALIGNMENT, _UI_FONT_ALIGNMENT[search_ctrl_number(ui_id)])
end function

function reset_value(ui_id)
	set_control_par(ui_id, CONTROL_PAR_VALUE, _UI_DEFAULT_VALUE[search_ctrl_number(ui_id)])	
end function

function reset_visibility(ui_id)
	set_control_par(ui_id, CONTROL_PAR_HIDE, _UI_DEF_VISIBILITY[search_ctrl_number(ui_id)])	
end function

{Set UI Level Meter colours. Colours are HEX values. "9" is needed to let Kontakt know that value is a number.}
function set_level_meter_color(ui_id, bg_color, off_color, on_color, overload_color, peak_color)
	set_control_par(ui_id, CONTROL_PAR_BG_COLOR, bg_color)
	set_control_par(ui_id, CONTROL_PAR_OFF_COLOR, off_color)
	set_control_par(ui_id, CONTROL_PAR_ON_COLOR, on_color)
	set_control_par(ui_id, CONTROL_PAR_OVERLOAD_COLOR, overload_color)
	set_control_par(ui_id, CONTROL_PAR_PEAK_COLOR, peak_color)
end function

{Add menu entries. Used as a macro because I need to use the Wild Card #.}
macro add_menu_entry(#name#, text, visibility)
	!#name#_entries[_#name#_COUNT] := text
	add_menu_item(#name#, text, _#name#_COUNT)
	set_menu_item_visibility(get_ui_id(#name#), _#name#_COUNT, visibility)
	inc(_#name#_COUNT)
end macro

{Get values}
function get_def_pos_x(ui_id) -> return
	return := _UI_POS_X[search_ctrl_number(ui_id)]
end function

function get_def_pos_y(ui_id) -> return
	return := _UI_POS_Y[search_ctrl_number(ui_id)]
end function

function get_def_visibility(ui_id) -> return
	return := _UI_CURR_VISIBILITY[search_ctrl_number(ui_id)]
end function

function get_def_height(ui_id) -> return
	return := _UI_HEIGHT[search_ctrl_number(ui_id)]
end function

function get_def_value(ui_id) -> return
	return := _UI_DEFAULT_VALUE[search_ctrl_number(ui_id)]
end function

function get_def_picture(ui_id) -> return
	return := !_UI_PICTURE[search_ctrl_number(ui_id)]
end function

function get_type(ui_id) -> return
	return := _UI_TYPE[search_ctrl_number(ui_id)]
end function

function get_pos_x(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_POS_X)
end function

function get_pos_y(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_POS_Y)
end function

function get_width(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_WIDTH)
end function

function get_height(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_HEIGHT)
end function

function get_value(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_VALUE)
end function

function get_picture(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_PICTURE)
end function

function get_visibility(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_HIDE)
end function

{---------------------- PRIVATE ----------------------}


function _add_ctrl(name, fam)
	inc(_UI_COUNT)
	_UI_IDS[_UI_COUNT] := get_ui_id(name)
	_UI_FAMILIES[_UI_COUNT] := fam
end function

function _store_pos_data(x, y)
	_UI_POS_X[_UI_COUNT] := x
	_UI_POS_Y[_UI_COUNT] := y
end function

function _store_visibility(ui_id, status)
	_UI_CURR_VISIBILITY[_UI_COUNT] := status
	_UI_DEF_VISIBILITY[_UI_COUNT] := status
end function

function _store_size_data(w, h)
	_UI_WIDTH[_UI_COUNT] := w
	_UI_HEIGHT[_UI_COUNT] := h
end function

function _store_def_value(default)
	_UI_DEFAULT_VALUE[_UI_COUNT] := default
end function

function _store_ctrl_pic(picture)
	!_UI_PICTURE[_UI_COUNT] := picture
end function

function _store_ctrl_text(text)
	!_UI_TEXT[_UI_COUNT] := text
end function

function _store_ctrl_font_type(font)
	_UI_FONT_TYPE[_UI_COUNT] := font
end function

function _store_ctrl_font_alignment(alignment)
	_UI_FONT_ALIGNMENT[_UI_COUNT] := alignment
end function

function _ctrl_type(type)
	_UI_TYPE[_UI_COUNT] := type
end function

function _update_init_value(ui_id, array, new_value)
	if (NI_CALLBACK_TYPE = NI_CB_TYPE_INIT)
		array[search_ctrl_number(ui_id)] := new_value
	end if
end function

